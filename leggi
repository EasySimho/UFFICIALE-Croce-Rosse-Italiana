// First, go to Supabase Dashboard and add this RLS policy for the 'database' bucket:
/*
CREATE POLICY "Allow public access"
ON storage.objects
FOR ALL
USING (bucket_id = 'database');
*/

import express from 'express';
import cors from 'cors';
import { createClient } from '@supabase/supabase-js';
import * as XLSX from 'xlsx';

const supabase = createClient(
  'https://gewhmnxsxjjowabtldcl.supabase.co',
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imdld2htbnhzeGpqb3dhYnRsZGNsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzE5MjY0MDAsImV4cCI6MjA0NzUwMjQwMH0.5pPsxBvlDGNfxwLcUgb7eG52vEwCiTHeDnTBGvLqQl8'
);

const BUCKET_NAME = 'database';
const DB_FILE = 'database.xlsx';
const REPORT_FILE = 'report.xlsx';

async function uploadFile(fileName, buffer, retries = 3) {
  for (let i = 0; i < retries; i++) {
    try {
      console.log(`Uploading ${fileName} to Supabase storage (attempt ${i + 1})...`);
      const { error } = await supabase.storage
        .from(BUCKET_NAME)
        .upload(fileName, buffer, {
          upsert: true,
          contentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
          cacheControl: '3600'
        });
      if (error) throw error;
      console.log(`Successfully uploaded ${fileName}`);
      return;
    } catch (error) {
      if (i === retries - 1) throw error;
      await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1)));
    }
  }
}

async function downloadFile(fileName, retries = 3) {
  for (let i = 0; i < retries; i++) {
    try {
      console.log(`Downloading ${fileName} from Supabase storage (attempt ${i + 1})...`);
      const { data, error } = await supabase.storage
        .from(BUCKET_NAME)
        .download(fileName);
      if (error) throw error;
      console.log(`Successfully downloaded ${fileName}`);
      return await data.arrayBuffer();
    } catch (error) {
      if (i === retries - 1) throw error;
      await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1)));
    }
  }
}

async function initializeDB() {
  try {
    console.log('Checking bucket existence...');
    const { error: bucketError } = await supabase.storage.getBucket(BUCKET_NAME);
    
    if (bucketError) {
      console.log('Creating bucket...');
      const { error } = await supabase.storage.createBucket(BUCKET_NAME, {
        public: false,
        allowedMimeTypes: ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet']
      });
      if (error) throw error;
    }

    console.log('Initializing database...');
    const workbook = XLSX.utils.book_new();
    const sheet = XLSX.utils.json_to_sheet([]);
    XLSX.utils.book_append_sheet(workbook, sheet, "Database");
    const buffer = XLSX.write(workbook, { type: 'buffer' });
    
    await uploadFile(DB_FILE, buffer);
    await uploadFile(REPORT_FILE, buffer);
    
    console.log('Database initialization complete');
  } catch (error) {
    console.error('Database initialization error:', error);
    throw error;
  }
}